---
description: 
globs: 
alwaysApply: true
---
# AI 代理协议：自包含的强制性交互式最终审查循环，附带脚本自动创建 (JavaScript / Node.js 版本 - CommonJS)

## 0. 用户须知与安全:
这是一个高级的实验性规则。它指示 AI 代理检查、可能创建，然后执行一个 JavaScript 脚本 (`final_review_gate.cjs`) 在你的项目根目录中，以促进一个交互式审查循环。使用此规则即表示你承认 AI 将尝试按指示进行文件系统操作（读取、写入、执行）。如果你期望脚本自动创建功能生效，请确保 AI 的执行环境具有适当的权限，并注意其安全隐患。

## 1. 核心原则与背景:
你的主要任务处理包括一个**强制性的最终交互式审查阶段**，该阶段通过一个特定的 JavaScript 脚本 (`final_review_gate.cjs`) 由用户输入驱动。在审查阶段明确发出完成信号之前，你**不能**认为你的整体任务已完成。本协议利用你已知在子终端（在聊天界面中显示）运行命令并读取其输出的能力。

---

## 阶段 0: 确保 `final_review_gate.cjs` 脚本存在
（此阶段在每次触发此整体协议的用户请求中执行一次，或者在脚本缺失或其内容不正确时执行。）

1.  **定义脚本细节:**
    * **脚本名称:** `final_review_gate.cjs`
    * **目标位置:** 直接在当前项目/工作区的根目录。
    * **JavaScript 脚本内容 (确保使用此确切内容):**
        ```javascript
        // final_review_gate.cjs
        const readline = require('readline');
        const process = require('process');

        // 创建readline接口，用于读取标准输入
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
            terminal: false // 如果stdout不是TTY，可以设置为false
        });

        // 输出信息
        console.log("--- 最终审查关卡已激活 ---");
        console.log("AI 已完成其主要操作。正在等待你的审查或进一步的子提示。");
        console.log("请输入你的子提示，或输入以下任一指令以表示完成：'TASK_COMPLETE', 'Done', 'Quit', 'q'。");

        let activeSession = true;

        const promptForInput = () => {
            if (!activeSession) {
                return;
            }
            // 打印提示符，不带换行，以便用户输入接在其后
            process.stdout.write("审查关卡等待输入:");
        };

        // 监听每一行输入
        rl.on('line', (line) => {
            if (!activeSession) {
                return;
            }

            const userInput = line.trim();

            if (userInput.toUpperCase() === 'TASK_COMPLETE' ||
                userInput.toUpperCase() === 'DONE' ||
                userInput.toUpperCase() === 'QUIT' ||
                userInput.toUpperCase() === 'Q') {
                console.log(`--- 审查关卡：用户已通过 '${userInput.toUpperCase()}' 发出完成信号 ---`);
                activeSession = false;
                rl.close(); // 关闭readline接口，结束输入监听
            } else if (userInput) { // 如果有任何非空输入
                console.log(`用户审查子提示: ${userInput}`);
                // 立即再次提示用户输入
                promptForInput();
            } else {
                // 如果是空行，继续等待输入，再次提示
                promptForInput();
            }
        });

        // 监听关闭事件 (例如，当 rl.close() 被调用时)
        rl.on('close', () => {
            console.log("--- 最终审查关卡脚本已退出 ---");
            process.exit(0); // 正常退出进程
        });

        // 监听标准输入流的结束 (EOF)
        process.stdin.on('end', () => {
            if (activeSession) {
                console.log("--- 审查关卡：标准输入已关闭 (EOF)，正在退出脚本 ---");
                activeSession = false;
                rl.close();
            }
        });

        // 监听进程退出信号 (Ctrl+C)
        process.on('SIGINT', () => {
            if (activeSession) {
                console.log("\n--- 审查关卡：会话被用户中断 (KeyboardInterrupt) ---");
                activeSession = false;
                rl.close();
            }
        });

        // 捕获未处理的错误
        process.on('uncaughtException', (err) => {
            console.error(`--- 审查关卡脚本错误: ${err.message} ---`);
            activeSession = false;
            rl.close();
        });

        // 首次启动时提示用户输入
        promptForInput();
        ```

2.  **确保脚本存在和正确性:**
    a. 使用你的文件系统工具检查文件 `final_review_gate.cjs` 是否存在于项目根目录中。
    b. **如果文件 `final_review_gate.cjs` 不存在，或者其内容与“阶段 0.1.JavaScript 脚本内容”部分提供的 JavaScript 脚本内容不**完全**匹配（你可能需要读取现有文件并进行比较）:**
        i. 你**必须**在项目根目录中创建或覆盖 `final_review_gate.cjs` 文件。
        ii. 此文件的内容**必须**与上面提供的 JavaScript 脚本内容**完全一致**。确保所有缩进、注释和行都完美保留。使用你的“创建文件”或“编辑文件”工具。
        iii. 创建/覆盖后，宣布：“`final_review_gate.cjs` 脚本已在项目根目录中创建/更新，并已包含最新的交互增强功能。”
    c. **如果文件 `final_review_gate.cjs` 已存在且其内容正确:** 你可以跳过宣布其创建。
    d. 如果你在检查、读取或创建/写入文件时遇到任何错误（例如，权限问题），你**必须**向用户报告。清晰地说明：“管理 `final_review_gate.cjs` 时出错: [具体错误]。无法继续交互式审查。” 然后在没有此交互步骤的情况下，尽可能地总结主任务的交互。

---

## 阶段 1: 主要任务执行
1.  像往常一样处理用户的主要请求：执行分析、进行代码更改、调用工具以及在子终端运行应用程序/测试（如果主要任务需要）。
    * **应用程序执行确认:** 在尝试运行整个应用程序（例如，Web 服务器、完整前端构建、长时间运行的后台进程）之前，你**必须**向用户寻求明确确认。例如：“我即将运行 [应用程序名称/命令]。是否可以继续，或者它可能已经在运行？”
    * 此确认**不**需要用于运行单个测试脚本、代码检查工具、特定组件的构建工具或完成任务所需的其他非应用程序级别的命令。
    * 如果用户指出应用程序已在运行或拒绝权限，请相应地调整你的策略（例如，专注于测试或特定文件执行）。
2.  利用你读取这些子终端输出/错误的能力，在此主要阶段进行迭代修复。

---

## 阶段 2: 强制性最终交互式审查脚本执行
1.  **过渡点:** 一旦你认为你已为用户的初始请求完成了所有实质性操作（阶段 1），**不要结束对话**。你现在**必须**过渡到此最终交互式审查阶段。
2.  **操作:** 从项目根目录执行 `final_review_gate.cjs` 脚本（你已在阶段 0 确保其存在且正确）。
    * 确定执行环境中可用的正确 Node.js 命令（例如，`node`）。一个健壮的命令尝试可以是 `node ./final_review_gate.cjs`。
    * **至关重要的是，此脚本的终端必须直接在聊天窗口内运行，并且其输出必须在生成时持续对用户可见。** 它不能作为单独的窗口弹出或在后台隐藏运行。你**必须**等待脚本（及其终端交互）完全完成并退出后，才能继续任何进一步的操作或尝试结束整个任务。你的处理将被此脚本的执行所阻塞。
3.  **宣布:** 清晰地告知用户：“我已完成主要操作。现在通过运行 `./final_review_gate.cjs` 启动强制性最终交互式审查。审查终端现已在此聊天窗口中激活，其输出将实时显示。请将任何子提示直接输入到该脚本的输入区域，或在满意时键入 'TASK_COMPLETE'、'Done'、'Quit' 或 'q'。”

---

## 阶段 3: 交互式审查循环 (监控脚本输出)
1.  **主动监控与显示:** 持续监控已启动的 `final_review_gate.cjs` 脚本的标准输出 (stdout)，**因为它会实时显示在聊天窗口中**。确保用户能看到所有脚本输出，包括“审查关卡等待输入:”提示。你将使用与读取终端日志或错误消息相同的功能来“读取”其输出。如果输入为空，脚本将循环并重新提示。
2.  **用户子提示检测:** 当脚本的 stdout 打印出**完全符合**以下格式的行时:
    `用户审查子提示: <user's sub-prompt text>`
    你**必须**将 `<user's sub-prompt text>` 解释为来自用户的新的、直接的、可操作的指令。
3.  **处理子提示:**
    a. 此指令是**原始的、仍处于活动状态的任务**的延续或细化。
    b. 分析子提示。执行任何必要的动作（代码更改、新的工具调用、文件操作等）。**在此阶段进行的所有工具调用都属于原始请求的工具调用预算。** 如果子提示请求运行整个应用程序，则适用“阶段 1，步骤 1（应用程序执行确认）”中的确认原则。
    c. 像往常一样，在主聊天界面中提供这些动作的反馈或结果。
    d. 在处理完子提示并在聊天中提供反馈后，**立即**将你的注意力转回监控 `final_review_gate.cjs` 脚本的终端输出（该输出仍保持实时并在聊天中可见），以等待下一个用户指令或完成信号。这个循环至关重要。
4.  **完成信号检测:** 交互式审查循环持续进行，直到脚本的 stdout（在聊天窗口中可见）打印出包含以下内容的行:
    * `--- 审查关卡：用户已通过 'TASK_COMPLETE' 发出完成信号 ---`（或 'DONE'、'QUIT'、'Q'，根据脚本逻辑）
    * 或者 `--- 最终审查关卡脚本已退出 ---`（或任何其他脚本退出/错误消息，如 `审查关卡：标准输入已关闭 (EOF)` 或 `审查关卡脚本错误:`）

---

## 阶段 4: 真正任务结论
1.  只有在 `final_review_gate.cjs` 脚本终止后（通过其在聊天窗口中的终端会话关闭并打印出最终退出消息可见），你才被允许认为用户的原始请求已完全满足。
2.  然后，你可以提供你在所有阶段（包括交互式审查）所采取的所有行动的最终总结。

---

## 覆盖默认行为:
整个“最终交互式审查”过程（阶段 0、2、3 和 4）是一个**严格的、不可协商的要求**，它覆盖了你在完成阶段 1 后结束对话的任何默认倾向。只有当用户通过审查脚本明确确认或脚本以其他方式因错误或 EOF 终止时（根据已定义的行为，包括聊天内、阻塞和持续可见的终端执行），任务才算完成。你对原始请求的“完成感”被推迟到此交互式审查完成之后。
